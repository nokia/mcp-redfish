name: CI/CD Pipeline

on:
  # Run CI on all PRs to main branch (this is the quality gate)
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.13"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH

    - name: Create virtual environment and install dependencies
      run: |
        uv venv
        source .venv/bin/activate
        uv sync --extra dev --extra test

    - name: Run tests
      run: |
        source .venv/bin/activate
        uv run pytest -v

    - name: Run coverage (if possible)
      run: |
        source .venv/bin/activate
        # Try with coverage, continue on failure (e.g., missing SQLite3)
        uv run pytest --cov=src --cov-report=xml --cov-report=term-missing --cov-fail-under=70 || echo "Coverage skipped due to environment issues"
      continue-on-error: true

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.13"

    - name: Install uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH

    - name: Create virtual environment and install dependencies
      run: |
        uv venv
        source .venv/bin/activate
        uv sync --extra dev

    - name: Run Ruff (Linting & Import Sorting)
      run: |
        source .venv/bin/activate
        uv run ruff check src/ test/ e2e/python/

    - name: Run Ruff (Formatting Check)
      run: |
        source .venv/bin/activate
        uv run ruff format --check src/ test/ e2e/python/

    - name: Run MyPy (Type Checking)
      run: |
        source .venv/bin/activate
        uv run mypy src/ e2e/python/
      continue-on-error: true  # MyPy might need some work initially

  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.13"

    - name: Install uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH

    - name: Install dependencies
      run: |
        uv venv
        source .venv/bin/activate
        uv sync --extra dev

    - name: Run Bandit (Security Linting)
      run: |
        source .venv/bin/activate
        uv run bandit -r src/ e2e/python/ -f json -o bandit-report.json
      continue-on-error: true

    - name: Upload Bandit report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: bandit-report
        path: bandit-report.json

  container:
    name: Container Build
    runs-on: ubuntu-latest
    # Build container for all events (PRs and pushes)
    # This ensures Docker builds are tested before merging

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build container image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        load: true
        tags: mcp-redfish:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test container image
      run: |
        docker run --rm --entrypoint="" mcp-redfish:test python --version

  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [test, code-quality]
    # E2E tests include MCP server startup, inspector integration, and real Redfish testing

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.13"

    - name: Install uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH

    - name: Install dependencies
      run: |
        uv venv
        source .venv/bin/activate
        uv sync --extra dev

    - name: Install Node.js for MCP Inspector
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y curl jq openssl

    - name: Set up e2e environment
      run: |
        source .venv/bin/activate
        make e2e-emulator-setup

    - name: Run e2e tests
      run: |
        source .venv/bin/activate
        make e2e-test-framework

    - name: Check emulator logs on failure
      if: failure()
      run: |
        echo "=== Emulator Logs ==="
        make e2e-emulator-logs || echo "No logs available"

    - name: Cleanup e2e environment
      if: always()
      run: |
        make e2e-emulator-stop || true
